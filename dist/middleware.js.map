{"version":3,"sources":["../src/middleware.js"],"names":["jwt","require","secret","module","exports","createToken","user","token","sign","id","expiresIn","verifyToken","req","res","next","body","param","headers","verify","err","decoded","json","success","msg"],"mappings":"AAAA;;AAEA,IAAIA,MAAMC,QAAQ,cAAR,CAAV;AACA,IAAIC,SAAS,qBAAb;;AAEAC,OAAOC,OAAP,GAAiB;;AAEf;AACAC,cAAa,qBAAUC,IAAV,EAAgB;AAC5B,MAAIC,QAAQP,IAAIQ,IAAJ,CAAS,EAAEF,MAAMA,KAAKG,EAAb,EAAT,EAA4BP,MAA5B,EAAoC,EAAEQ,WAAW,KAAb,EAApC,CAAZ;AACA,SAAOH,KAAP;AACA,EANc;;AAQf;AACAI,cAAa,qBAAUC,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;;AAEtC;AACA;AACA,MAAIP,QAAQK,IAAIG,IAAJ,CAASR,KAAT,IAAkBK,IAAII,KAAJ,CAAU,OAAV,CAAlB,IAAwCJ,IAAIK,OAAJ,CAAY,gBAAZ,CAApD;;AAEA;AACA,MAAIV,KAAJ,EAAW;;AAEV;AACAP,OAAIkB,MAAJ,CAAWX,KAAX,EAAkBL,MAAlB,EAA0B,UAASiB,GAAT,EAAcC,OAAd,EAAuB;AAChD,QAAID,GAAJ,EAAS;AACRN,SAAIQ,IAAJ,CAAS;AACRC,eAAS,KADD;AAERC,WAAK;AAFG,MAAT;AAIA,KALD,MAKM;AACLX,SAAIQ,OAAJ,GAAcA,OAAd;AACAN;AACA;AACD,IAVD;AAYA,GAfD,MAeO;;AAEN;AACAD,OAAIQ,IAAJ,CAAS;AACRC,aAAS,KADD;AAERC,SAAK;AAFG,IAAT;AAIA;AACD;AAvCc,CAAjB","file":"middleware.js","sourcesContent":["'use strict';\r\n\r\nvar jwt = require('jsonwebtoken')\r\nvar secret = 'inibener2rahasialho';\r\n\r\nmodule.exports = {\r\n\r\n  // Create route middleware to create a token\r\n  createToken: function (user) {\r\n\t  var token = jwt.sign({ user: user.id }, secret, { expiresIn: '24h' });\r\n\t  return token;\r\n  },\r\n  \r\n  // Create route middleware to verify a token\r\n  verifyToken: function (req, res, next) {\r\n\t  \r\n\t  // Check header or URL parameter for token\r\n\t  // var token = req.body.token;\r\n\t  var token = req.body.token || req.param('token') || req.headers['x-access-token'];\r\n\t  \r\n\t  // Decode token\r\n\t  if (token) {\r\n\t\t  \r\n\t\t  // Verify secret and check expiry\r\n\t\t  jwt.verify(token, secret, function(err, decoded) {\r\n\t\t\t  if (err) {\r\n\t\t\t\t  res.json({\r\n\t\t\t\t\t  success: false,\r\n\t\t\t\t\t  msg: \"Failed to authenticate token.\"\r\n\t\t\t\t  });\r\n\t\t\t  }else {\r\n\t\t\t\t  req.decoded = decoded;\r\n\t\t\t\t  next();\r\n\t\t\t  }\r\n\t\t  });\r\n\t\t  \r\n\t  } else {\r\n\t\t  \r\n\t\t  // No token provided\r\n\t\t  res.json({\r\n\t\t\t  success: false,\r\n\t\t\t  msg: \"No token provided.\"\r\n\t\t  });\t\t  \r\n\t  }\r\n  }\t\r\n} "]}