{"version":3,"sources":["../../../src/server/models/user.js"],"names":["User","citizen_id","type","STRING","allowNull","unique","message","isNumeric","user_name","validate","notEmpty","is","args","phone_number","email","isEmail","full_name","password","len","models"],"mappings":"AAAA;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,I;;;;;;;;;;;;;AAEpB;2BACgB;AACf,UAAO;AACNC,gBAAY;AACXC,WAAM,oBAAUC,MADL;AAEXC,gBAAW,IAFA;AAGXC,aAAQ;AACPC,eAAS;AADF,MAHG;AAMXC,gBAAW;AACVD,eAAS;AADC;AANA,KADN;AAWNE,eAAW;AACVN,WAAM,oBAAUC,MADN;AAEVC,gBAAW,KAFD;AAGVC,aAAQ;AACPC,eAAS;AADF,MAHE;AAMVG,eAAU;AACTC,gBAAU,EAACJ,SAAS,8BAAV,EADD;AAETK,UAAI,EAACC,MAAM,kBAAP,EAA2BN,SAAS,2DAApC;AAFK;AANA,KAXL;AAsBNO,kBAAc;AACbX,WAAM,oBAAUC,MADH;AAEbC,gBAAW,IAFE;AAGbC,aAAQ;AACPC,eAAS;AADF,MAHK;AAMbC,gBAAW;AACVD,eAAS;AADC;AANE,KAtBR;AAgCNQ,WAAO;AACNZ,WAAM,oBAAUC,MADV;AAENC,gBAAW,IAFL;AAGNC,aAAQ;AACPC,eAAS;AADF,MAHF;AAMNG,eAAU;AACTM,eAAS;AACRT,gBAAS;AADD;AADA;AANJ,KAhCD;AA4CNU,eAAW;AACVd,WAAM,oBAAUC;AADN,KA5CL;AA+CNc,cAAU;AACTf,WAAM,oBAAUC,MADP;AAETM,eAAU;AACTC,gBAAU,EAACJ,SAAS,8BAAV,EADD;AAETY,WAAK,EAACN,MAAM,CAAC,CAAD,EAAG,EAAH,CAAP,EAAeN,SAAS,6BAAxB;AAFI;AAFD;AA/CJ,IAAP;AAuDA;;AAED;;;;4BACiBa,M,EAAQ,CAExB;;AAED;;;;yBACcP,I,EAAM,CAEnB;;AAED;;AAEA;;;;;;;AAID;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBA7EqBZ,I","file":"user.js","sourcesContent":["'use strict';\nimport Sequelize, { Model } from 'sequelize';\nimport bcrypt from 'bcrypt';\n\nexport default class User extends Model {\n\t\n\t/* FIELDS */\n\tstatic fields() {\n\t\treturn {\n\t\t\tcitizen_id: {\n\t\t\t\ttype: Sequelize.STRING,\n\t\t\t\tallowNull: true,\n\t\t\t\tunique: {\n\t\t\t\t\tmessage: \"Nomor EKTP/NIK sudah terdaftar.\"\n\t\t\t\t},\n\t\t\t\tisNumeric: {\n\t\t\t\t\tmessage: \"Format nomor EKTP/NIK salah.\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tuser_name: {\n\t\t\t\ttype: Sequelize.STRING,\n\t\t\t\tallowNull: false,\n\t\t\t\tunique: {\n\t\t\t\t\tmessage: \"Username sudah terdaftar.\"\n\t\t\t\t},\n\t\t\t\tvalidate: {\n\t\t\t\t\tnotEmpty: {message: \"Username tidak boleh kosong.\"},\n\t\t\t\t\tis: {args: /^[a-z0-9\\_\\-]+$/i, message: \"Username harus berupa kombinasi huruf, angka, '-' dan '_'\"}\t\t\n\t\t\t\t}\n\t\t\t  },\n\t\t\tphone_number: {\n\t\t\t\ttype: Sequelize.STRING,\n\t\t\t\tallowNull: true,\n\t\t\t\tunique: {\n\t\t\t\t\tmessage: \"Nomor telepon sudah terdaftar.\"\n\t\t\t\t},\n\t\t\t\tisNumeric: {\n\t\t\t\t\tmessage: \"Format nomor telepon salah.\"\n\t\t\t\t}\n\t\t\t},\n\t\t\temail: {\n\t\t\t\ttype: Sequelize.STRING,\n\t\t\t\tallowNull: true,\n\t\t\t\tunique: {\n\t\t\t\t\tmessage: \"Email sudah terdaftar.\"\n\t\t\t\t},\n\t\t\t\tvalidate: {\n\t\t\t\t\tisEmail: {\n\t\t\t\t\t\tmessage: \"Format email salah.\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfull_name: {\n\t\t\t\ttype: Sequelize.STRING  \n\t\t\t},\n\t\t\tpassword: {\n\t\t\t\ttype: Sequelize.STRING,\n\t\t\t\tvalidate: {\n\t\t\t\t\tnotEmpty: {message: \"Password tidak boleh kosong.\"},\n\t\t\t\t\tlen: {args: [6,50], message: \"Password minimal 6 karakter\"}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* RELATIONSHIPS */\n\tstatic associate(models) {\n\t\t\n\t}\n\t\n\t/* CLASS-LEVEL FUNCTIONS */\n\tstatic create(args) {\n\t\t\n\t}\n\t\n\t/* GRAPHQL MUTATIONS */\n\t\n\t/* OTHERS */\n\t\n}\n\n/* Old version\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('user', {\n    citizen_id: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: true,\n\t\tunique: {\n\t\t    message: \"Nomor EKTP/NIK sudah terdaftar.\"\n\t\t},\n\t\tisNumeric: {\n\t\t\tmessage: \"Format nomor EKTP/NIK salah.\"\n\t\t}\n\t},\n\tuser_name: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: false,\n\t\tunique: {\n\t\t\tmessage: \"Username sudah terdaftar.\"\n\t\t},\n\t\tvalidate: {\n\t\t\tnotEmpty: {message: \"Username tidak boleh kosong.\"},\n\t\t\tis: {args: /^[a-z0-9\\_\\-]+$/i, message: \"Username harus berupa kombinasi huruf, angka, '-' dan '_'\"}\t\t\n\t\t}\n\t  },\n    phone_number: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: true,\n\t\tunique: {\n\t\t    message: \"Nomor telepon sudah terdaftar.\"\n\t\t},\n\t\tisNumeric: {\n\t\t\tmessage: \"Format nomor telepon salah.\"\n\t\t}\n\t},\n\temail: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: true,\n\t\tunique: {\n\t\t\tmessage: \"Email sudah terdaftar.\"\n\t\t},\n\t\tvalidate: {\n\t\t\tisEmail: {\n\t\t\t\tmessage: \"Format email salah.\"\n\t\t\t}\n\t\t}\n\t},\n\tfull_name: {\n\t\ttype: Sequelize.STRING  \n\t},\n\tpassword: {\n\t\ttype: Sequelize.STRING,\n\t\tvalidate: {\n\t\t\tnotEmpty: {message: \"Password tidak boleh kosong.\"},\n\t\t\tlen: {args: [6,50], message: \"Password minimal 6 karakter\"}\n\t\t}\n\t},\n  }, \n\n  {\n\thooks: {\n\t\t// Hook used for hashing the password before inserted into db\n\t\tbeforeCreate: function(createdUser, options, cb) {\n\t\t\tvar hash = bcrypt.hashSync(createdUser.password, 10);\n\t\t\tcreatedUser.password = hash;\n\t\t\tcb(null, createdUser);\n\t\t}\n\t}  \n  },\n  {\n    classMethods: {\n      associate: function(models) {\n        // single User has many Geo\n\t\tUser.hasMany(models.Geo);\n      }\n    },\n\tinstanceMethods: {\n\t\tvalidPassword: function(value) {\n\t\t\t// return true if password matches the hash\n\t\t\treturn bcrypt.compareSync(value, this.password)\n\t\t}\n\t} \t\t\n  },\n  {\n\t  // add the timestamp attributes (updatedAt, createdAt).\n\t  timestamps: true,\n\n\t  // don't delete database entries but set the newly added attribute deletedAt\n\t  // to the current date (when deletion was done). paranoid will only work if\n\t  // timestamps are enabled\n\t  // paranoid: true,\n\n\t  // don't use camelcase for automatically added attributes but underscore style\n\t  // so updatedAt will be updated_at\n\t  underscored: true,\n  }\n  );\n  return User;\n};\n*/"]}