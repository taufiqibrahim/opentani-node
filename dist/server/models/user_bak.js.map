{"version":3,"sources":["../../../src/server/models/user_bak.js"],"names":["Sequelize","require","bcrypt","module","exports","sequelize","DataTypes","User","define","citizen_id","type","STRING","allowNull","unique","message","isNumeric","user_name","validate","notEmpty","is","args","phone_number","email","isEmail","full_name","password","len","hooks","beforeCreate","createdUser","options","cb","hash","hashSync","classMethods","associate","models","hasMany","Geo","instanceMethods","validPassword","value","compareSync","timestamps","underscored"],"mappings":"AAAA;;AACA,IAAIA,YAAYC,QAAQ,WAAR,CAAhB;AACA,IAAIC,SAASD,QAAQ,QAAR,CAAb;;AAEAE,OAAOC,OAAP,GAAiB,UAASC,SAAT,EAAoBC,SAApB,EAA+B;AAC9C,KAAIC,OAAOF,UAAUG,MAAV,CAAiB,MAAjB,EAAyB;AAClCC,cAAY;AACdC,SAAMV,UAAUW,MADF;AAEdC,cAAW,IAFG;AAGdC,WAAQ;AACJC,aAAS;AADL,IAHM;AAMdC,cAAW;AACVD,aAAS;AADC;AANG,GADsB;AAWrCE,aAAW;AACVN,SAAMV,UAAUW,MADN;AAEVC,cAAW,KAFD;AAGVC,WAAQ;AACPC,aAAS;AADF,IAHE;AAMVG,aAAU;AACTC,cAAU,EAACJ,SAAS,8BAAV,EADD;AAETK,QAAI,EAACC,MAAM,kBAAP,EAA2BN,SAAS,2DAApC;AAFK;AANA,GAX0B;AAsBlCO,gBAAc;AAChBX,SAAMV,UAAUW,MADA;AAEhBC,cAAW,IAFK;AAGhBC,WAAQ;AACJC,aAAS;AADL,IAHQ;AAMhBC,cAAW;AACVD,aAAS;AADC;AANK,GAtBoB;AAgCrCQ,SAAO;AACNZ,SAAMV,UAAUW,MADV;AAENC,cAAW,IAFL;AAGNC,WAAQ;AACPC,aAAS;AADF,IAHF;AAMNG,aAAU;AACTM,aAAS;AACRT,cAAS;AADD;AADA;AANJ,GAhC8B;AA4CrCU,aAAW;AACVd,SAAMV,UAAUW;AADN,GA5C0B;AA+CrCc,YAAU;AACTf,SAAMV,UAAUW,MADP;AAETM,aAAU;AACTC,cAAU,EAACJ,SAAS,8BAAV,EADD;AAETY,SAAK,EAACN,MAAM,CAAC,CAAD,EAAG,EAAH,CAAP,EAAeN,SAAS,6BAAxB;AAFI;AAFD;AA/C2B,EAAzB,EAwDX;AACDa,SAAO;AACN;AACAC,iBAAc,sBAASC,WAAT,EAAsBC,OAAtB,EAA+BC,EAA/B,EAAmC;AAChD,QAAIC,OAAO9B,OAAO+B,QAAP,CAAgBJ,YAAYJ,QAA5B,EAAsC,EAAtC,CAAX;AACAI,gBAAYJ,QAAZ,GAAuBO,IAAvB;AACAD,OAAG,IAAH,EAASF,WAAT;AACA;AANK;AADN,EAxDW,EAkEX;AACEK,gBAAc;AACZC,cAAW,mBAASC,MAAT,EAAiB;AAC1B;AACN7B,SAAK8B,OAAL,CAAaD,OAAOE,GAApB;AACK;AAJW,GADhB;AAODC,mBAAiB;AAChBC,kBAAe,uBAASC,KAAT,EAAgB;AAC9B;AACA,WAAOvC,OAAOwC,WAAP,CAAmBD,KAAnB,EAA0B,KAAKhB,QAA/B,CAAP;AACA;AAJe;AAPhB,EAlEW,EAgFX;AACC;AACAkB,cAAY,IAFb;;AAIC;AACA;AACA;AACA;;AAEA;AACA;AACAC,eAAa;AAXd,EAhFW,CAAX;AA8FA,QAAOrC,IAAP;AACD,CAhGD","file":"user_bak.js","sourcesContent":["'use strict';\nvar Sequelize = require('sequelize')\nvar bcrypt = require('bcrypt')\n\nmodule.exports = function(sequelize, DataTypes) {\n  var User = sequelize.define('user', {\n    citizen_id: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: true,\n\t\tunique: {\n\t\t    message: \"Nomor EKTP/NIK sudah terdaftar.\"\n\t\t},\n\t\tisNumeric: {\n\t\t\tmessage: \"Format nomor EKTP/NIK salah.\"\n\t\t}\n\t},\n\tuser_name: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: false,\n\t\tunique: {\n\t\t\tmessage: \"Username sudah terdaftar.\"\n\t\t},\n\t\tvalidate: {\n\t\t\tnotEmpty: {message: \"Username tidak boleh kosong.\"},\n\t\t\tis: {args: /^[a-z0-9\\_\\-]+$/i, message: \"Username harus berupa kombinasi huruf, angka, '-' dan '_'\"}\t\t\n\t\t}\n\t  },\n    phone_number: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: true,\n\t\tunique: {\n\t\t    message: \"Nomor telepon sudah terdaftar.\"\n\t\t},\n\t\tisNumeric: {\n\t\t\tmessage: \"Format nomor telepon salah.\"\n\t\t}\n\t},\n\temail: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: true,\n\t\tunique: {\n\t\t\tmessage: \"Email sudah terdaftar.\"\n\t\t},\n\t\tvalidate: {\n\t\t\tisEmail: {\n\t\t\t\tmessage: \"Format email salah.\"\n\t\t\t}\n\t\t}\n\t},\n\tfull_name: {\n\t\ttype: Sequelize.STRING  \n\t},\n\tpassword: {\n\t\ttype: Sequelize.STRING,\n\t\tvalidate: {\n\t\t\tnotEmpty: {message: \"Password tidak boleh kosong.\"},\n\t\t\tlen: {args: [6,50], message: \"Password minimal 6 karakter\"}\n\t\t}\n\t},\n  }, \n\n  {\n\thooks: {\n\t\t// Hook used for hashing the password before inserted into db\n\t\tbeforeCreate: function(createdUser, options, cb) {\n\t\t\tvar hash = bcrypt.hashSync(createdUser.password, 10);\n\t\t\tcreatedUser.password = hash;\n\t\t\tcb(null, createdUser);\n\t\t}\n\t}  \n  },\n  {\n    classMethods: {\n      associate: function(models) {\n        // single User has many Geo\n\t\tUser.hasMany(models.Geo);\n      }\n    },\n\tinstanceMethods: {\n\t\tvalidPassword: function(value) {\n\t\t\t// return true if password matches the hash\n\t\t\treturn bcrypt.compareSync(value, this.password)\n\t\t}\n\t} \t\t\n  },\n  {\n\t  // add the timestamp attributes (updatedAt, createdAt).\n\t  timestamps: true,\n\n\t  // don't delete database entries but set the newly added attribute deletedAt\n\t  // to the current date (when deletion was done). paranoid will only work if\n\t  // timestamps are enabled\n\t  // paranoid: true,\n\n\t  // don't use camelcase for automatically added attributes but underscore style\n\t  // so updatedAt will be updated_at\n\t  underscored: true,\n  }\n  );\n  return User;\n};"]}