{"version":3,"sources":["../../../src/routes/main/auth.js"],"names":["router","require","Router","Sequelize","bcrypt","models","middleware","post","req","res","body","email","password","User","findOne","where","then","user","json","status","text","error","message","ok","compareSync","token","createToken","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAASC,QAAQ,SAAR,EAAmBC,MAAnB,EAAb;AACA,IAAIC,YAAYF,QAAQ,WAAR,CAAhB;AACA,IAAIG,SAASH,QAAQ,QAAR,CAAb;AACA,IAAII,SAASJ,QAAQ,2BAAR,CAAb;AACA,IAAIK,aAAaL,QAAQ,8BAAR,CAAjB;;AAEAD,OAAOO,IAAP,CAAY,OAAZ,EAAqB,UAASC,GAAT,EAAcC,GAAd,EAAmB;;AAEvC,KAAID,IAAIE,IAAJ,CAASC,KAAT,IAAkBH,IAAIE,IAAJ,CAASE,QAA/B,EAAyC;AACxC;AACAP,SAAOQ,IAAP,CAAYC,OAAZ,CAAoB;AACnBC,UAAO;AACNJ,WAAOH,IAAIE,IAAJ,CAASC;AADV;AADY,GAApB,EAIGK,IAJH,CAIQ,UAASC,IAAT,EAAe;AACtB,OAAI,CAACA,IAAL,EAAW;AACVR,QAAIS,IAAJ,CAAS;AACRC,aAAQ,GADA;AAERC,WAAM,WAFE;AAGRC,YAAO;AACNC,eAAS;AADH;AAHC,KAAT;AAOA,IARD,MAQM,IAAGL,IAAH,EAAS;;AAEd;AACA,QAAIM,KAAKnB,OAAOoB,WAAP,CAAmBhB,IAAIE,IAAJ,CAASE,QAA5B,EAAsCK,KAAKL,QAA3C,CAAT;AACA,QAAG,CAACW,EAAJ,EAAQ;;AAEP;AACAd,SAAIS,IAAJ,CAAS;AACRC,cAAQ,GADA;AAERC,YAAM,cAFE;AAGRC,aAAO;AACNC,gBAAS;AADH;AAHC,MAAT;AAQA,KAXD,MAWO;;AAEN;AACA,SAAIG,QAAQnB,WAAWoB,WAAX,CAAuBT,IAAvB,CAAZ;;AAEAR,SAAIS,IAAJ,CAAS;AACRC,cAAQ,GADA;AAERC,YAAM,eAFE;AAGRK,aAAOA;AAHC,MAAT;AAKA;AACD;AACD,GAxCD;AAyCA,EA3CD,MA2CO;;AAEN;AACAhB,MAAIS,IAAJ,CAAS;AACRC,WAAQ,GADA;AAERC,SAAM,aAFE;AAGRC,UAAO;AACNC,aAAS;AADH;AAHC,GAAT;AAOA;AAED,CAzDD;;AA2DAK,OAAOC,OAAP,GAAiB5B,MAAjB","file":"auth.js","sourcesContent":["'use strict';\r\n\r\nvar router = require('express').Router();\r\nvar Sequelize = require('sequelize');\r\nvar bcrypt = require('bcrypt')\r\nvar models = require('../../server/models/index');\r\nvar middleware = require('../../middlewares/middleware')\r\n\r\nrouter.post('/auth', function(req, res) {\r\n\r\n\tif (req.body.email && req.body.password) {\r\n\t\t// find user using email\r\n\t\tmodels.User.findOne({\r\n\t\t\twhere: {\r\n\t\t\t\temail: req.body.email\r\n\t\t\t}\r\n\t\t}).then(function(user) {\r\n\t\t\tif (!user) {\r\n\t\t\t\tres.json({\r\n\t\t\t\t\tstatus: 404,\r\n\t\t\t\t\ttext: \"Not Found\",\r\n\t\t\t\t\terror: {\r\n\t\t\t\t\t\tmessage: \"User not found\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}else if(user) {\r\n\t\t\t\t\r\n\t\t\t\t// compare incoming password with hash from db\r\n\t\t\t\tvar ok = bcrypt.compareSync(req.body.password, user.password);\r\n\t\t\t\tif(!ok) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// wrong password\r\n\t\t\t\t\tres.json({\r\n\t\t\t\t\t\tstatus: 401,\r\n\t\t\t\t\t\ttext: \"Unauthorized\",\r\n\t\t\t\t\t\terror: {\r\n\t\t\t\t\t\t\tmessage: \"Password salah.\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\r\n\t\t\t\t\t// authenticated. create the token\r\n\t\t\t\t\tvar token = middleware.createToken(user);\r\n\t\t\t\t\t\r\n\t\t\t\t\tres.json({\r\n\t\t\t\t\t\tstatus: 200,\r\n\t\t\t\t\t\ttext: \"Authenticated\",\r\n\t\t\t\t\t\ttoken: token\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t} else {\r\n\t\t\r\n\t\t// Email or Password is empty. Return error 400\r\n\t\tres.json({\r\n\t\t\tstatus: 400,\r\n\t\t\ttext: \"Bad Request\",\r\n\t\t\terror: {\r\n\t\t\t\tmessage: \"Email / Password tidak boleh kosong\"\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\t\r\n});\r\n\r\nmodule.exports = router"]}