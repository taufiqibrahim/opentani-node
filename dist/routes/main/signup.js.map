{"version":3,"sources":["../../../src/routes/main/signup.js"],"names":["signup","use","req","res","countryCode","body","country_code","formattedPhoneNumber","user_name","isEmail","isPhone","email","phone_number","models","User","create","password","then","user","token","createToken","json","httpCode","httpMessage","catch","ValidationError","error","errors","err"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;AAEA;;;;AADA,IAAMA,SAAS,sBAAf;AAJA;;;AAOAA,OAAOC,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7B,KAAMC,cAAcF,IAAIG,IAAJ,CAASC,YAA7B;AACA,KAAMC,uBAAuB,8BAAO,6BAAML,IAAIG,IAAJ,CAASG,SAAf,EAA0BJ,WAA1B,CAAP,EAAgD,yBAAhD,CAA7B;AACA,KAAMK,UAAU,+BAAeP,IAAIG,IAAJ,CAASG,SAAxB,CAAhB;AACA,KAAME,UAAU,+BAAeH,oBAAf,CAAhB;AACA,KAAIC,YAAYN,IAAIG,IAAJ,CAASG,SAAzB;AACA,KAAIG,QAAQ,IAAZ;AACA,KAAIC,eAAe,IAAnB;;AAEA,KAAIH,OAAJ,EAAa;AACZE,UAAQT,IAAIG,IAAJ,CAASG,SAAjB;AACA,EAFD,MAEO,IAAIE,OAAJ,EAAa;AACnBE,iBAAeV,IAAIG,IAAJ,CAASG,SAAxB;AACA;;AAED,oBAAWK,MAAX,CAAkBC,IAAlB,CAAuBC,MAAvB,CAA8B;AAC7BP,aAAWN,IAAIG,IAAJ,CAASG,SADS;AAE7BI,gBAAcA,YAFe;AAG7BD,SAAOA,KAHsB;AAI7BK,YAAUd,IAAIG,IAAJ,CAASW;AAJU,EAA9B,EAMCC,IAND,CAMM,UAASC,IAAT,EAAe;AACpB,MAAIC,QAAQ,qBAAWC,WAAX,CAAuBF,IAAvB,CAAZ;AACAf,MAAIkB,IAAJ,CAAS;AACRC,aAAU,GADF;AAERC,gBAAa,IAFL;AAGRL,aAHQ;AAIRC;AAJQ,GAAT;AAMA,EAdD,EAeCK,KAfD,CAeO,oBAAUC,eAfjB,EAekC,UAACC,KAAD,EAAW;AAC5CvB,MAAIkB,IAAJ,CAAS;AACRC,aAAU,GADF;AAERC,gBAAa,aAFL;AAGRI,WAAQC,IAAID,MAAJ,CAAW,CAAX;AAHA,GAAT;AAKA,EArBD;;AAuBA;;;;;;;AAOA,CA7CD;;kBA+Ce3B,M","file":"signup.js","sourcesContent":["'use strict';\r\n\r\nimport express, { Router } from 'express';\r\nimport { connection } from '../../server/models/';\r\n// import models from '../../server/models/';\r\nimport Sequelize from 'sequelize';\r\nimport middleware from '../../middlewares/middleware';\r\nimport { emailValidator, phoneValidator } from '../../middlewares/validator';\r\nconst signup = Router();\r\nimport { parse, format, isValidNumber } from 'libphonenumber-js';\r\n\r\nsignup.use('/', (req, res) => {\r\n\tconst countryCode = req.body.country_code;\r\n\tconst formattedPhoneNumber = format(parse(req.body.user_name, countryCode) , 'International_plaintext');\r\n\tconst isEmail = emailValidator(req.body.user_name);\r\n\tconst isPhone = phoneValidator(formattedPhoneNumber);\r\n\tlet user_name = req.body.user_name;\r\n\tlet email = null;\r\n\tlet phone_number = null;\r\n\t\r\n\tif (isEmail) {\r\n\t\temail = req.body.user_name;\r\n\t} else if (isPhone) {\r\n\t\tphone_number = req.body.user_name;\r\n\t}\r\n\t\r\n\tconnection.models.User.create({\r\n\t\tuser_name: req.body.user_name,\r\n\t\tphone_number: phone_number,\r\n\t\temail: email,\r\n\t\tpassword: req.body.password\r\n\t})\r\n\t.then(function(user) {\r\n\t\tlet token = middleware.createToken(user);\r\n\t\tres.json({\r\n\t\t\thttpCode: 200,\r\n\t\t\thttpMessage: \"OK\",\r\n\t\t\tuser,\r\n\t\t\ttoken\r\n\t\t})\r\n\t})\r\n\t.catch(Sequelize.ValidationError, (error) => {\r\n\t\tres.json({\r\n\t\t\thttpCode: 400,\r\n\t\t\thttpMessage: \"Bad Request\",\r\n\t\t\terrors: err.errors[0]\r\n\t\t})\r\n\t})\r\n\t\r\n\t/*res.json({\r\n\t\tstatus: 200,\r\n\t\ttext: \"API Opentani is working!\",\r\n\t\tuser_name: user_name,\r\n\t\temail: email,\r\n\t\tphone_number: formattedPhoneNumber,\r\n\t})*/\r\n});\r\n\r\nexport default signup;"]}